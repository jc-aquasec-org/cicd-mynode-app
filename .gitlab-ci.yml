workflow:
  rules:
     - if: $CI_COMMIT_BRANCH != "main" && $CI_PIPELINE_SOURCE != "merge_request_event"      
       when: never
     - when: always

variables:
  IMAGE_NAME: $DOCKER_REGISTRY_IMAGE
  IMAGE_TAG: "1.0"
  #IMAGE_TAG: $CI_JOB_ID

stages:
- test
- scan_repo_code
- build_app
- build_image
- scan_image
- push
- deploy_dev
- deploy_staging
#- approve
- deploy_prod


sast:
  stage: test
  tags:
    - shared
include:
- template: Security/SAST.gitlab-ci.yml


aqua_repo_scanning:
  stage: scan_repo_code
  image: gitlab/dind
  tags:
    - shared
  script:
    #- export GITLAB_TOKEN=$GITLAB_TOKEN    
    - export TRIGGERED_BY=PUSH
    - export TRIVY_RUN_AS_PLUGIN=aqua
    - export trivyVersion=0.29.2
    - wget https://github.com/aquasecurity/trivy/releases/download/v${trivyVersion}/trivy_${trivyVersion}_Linux-64bit.deb
    - wget https://github.com/aquasecurity/trivy/releases/download/v${trivyVersion}/trivy_${trivyVersion}_checksums.txt
    - grep trivy_${trivyVersion}_Linux-64bit.deb trivy_${trivyVersion}_checksums.txt > trivy_${trivyVersion}_Linux-64bit.checksum
    - sha256sum -c trivy_${trivyVersion}_Linux-64bit.checksum
    - dpkg -i trivy_${trivyVersion}_Linux-64bit.deb
    #- trivy fs --security-checks config,vuln,secret .
    - trivy plugin update aqua
    - trivy -d fs --format template --template "@Report-Templates/aqua.tpl" -o report.html --security-checks config,vuln,secret .
  artifacts:
    paths:
    - $CI_PROJECT_DIR/report.html

build_app:
  stage: build_app
  image: gitlab/dind
  tags:
    - shared
  services:
    - docker:dind
  needs:
    - aqua_repo_scanning
  script:
    #- docker build -t $IMAGE_NAME:$IMAGE_TAG .
    - echo APP has been built!!

build_image:
  stage: build_image
  image: gitlab/dind
  tags:
    - shared
  services:
    - docker:dind
  needs:
    - build_app
  before_script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
  script:
    #- docker build -t $IMAGE_NAME:$IMAGE_TAG .
    - docker build --pull --no-cache -t $CI_REGISTRY_IMAGE:$IMAGE_TAG .
    - docker push $CI_REGISTRY_IMAGE:$IMAGE_TAG 
    
aqua_image_scanning:
  stage: scan_image
  tags:
    - shared
  image: gitlab/dind
  services:
    - docker:dind
  needs:
    - build_image
  before_script:
    - docker login -u "$AQUA_REGISTRY_USER" -p "$AQUA_REGISTRY_PASSWORD" $AQUA_REGISTRY
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
  script:
    - docker pull $AQUA_REGISTRY/scanner:2022.4.46
    - docker pull $CI_REGISTRY_IMAGE:$IMAGE_TAG 
    - docker run -e BUILD_JOB_NAME=$CI_JOB_NAME -e BUILD_URL=$CI_JOB_URL -e BUILD_NUMBER=$CI_JOB_ID --rm -v /tmp:$CI_PROJECT_DIR -v /var/run/docker.sock:/var/run/docker.sock $AQUA_REGISTRY/scanner:2022.4.46 scan --register --registry "CI/CD_andres_images" --local $CI_REGISTRY_IMAGE:$IMAGE_TAG --host $AQUA_HOST --token $AQUA_SCANNER_TOKEN --show-negligible --html > aquascan.html
    #-e SCALOCK_LOG_LEVEL=DEBUG
    - sleep 20
  artifacts:
    paths:
    - $CI_PROJECT_DIR/aquascan.html


aqua_generate_sbom:
  stage: scan_image
  tags:
    - shared
  image: gitlab/dind
  services:
    - docker:dind
  needs:
    - aqua_image_scanning
  script:
    - docker build --pull --no-cache -t $CI_REGISTRY_IMAGE:$IMAGE_TAG . 
    #- curl -L "$BILLY_URL/v1/api/download/sh" | sh
    #- billy generate --artifact-path "$CI_PROJECT_DIR/app" --output $CI_PROJECT_DIR/sbom.json --access-token $GITLAB_TOKEN --aqua-key $AQUA_KEY --aqua-secret $AQUA_SECRET
    - curl -sLo install.sh download.codesec.aquasec.com/billy/install.sh
    - curl -sLo install.sh.checksum https://github.com/argonsecurity/releases/releases/latest/download/install.sh.checksum
    - |
      if ! cat install.sh.checksum | shasum -a 256 ; then
          echo "install.sh checksum failed"
          exit 1
      fi
      sh install.sh
      rm install.sh install.sh.checksum
    - billy generate --artifact-path "$CI_REGISTRY_IMAGE:$IMAGE_TAG" --output $CI_PROJECT_DIR/sbom.json --access-token $GITLAB_TOKEN --aqua-key $AQUA_KEY --aqua-secret $AQUA_SECRET
  artifacts:
    paths:
    - $CI_PROJECT_DIR/sbom.json


push_image:
  stage: push
  tags:
    - shared
  image: gitlab/dind
  services:
    - docker:dind
  needs:
    - aqua_generate_sbom
  before_script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE:$IMAGE_TAG 
    - docker tag $CI_REGISTRY_IMAGE:$IMAGE_TAG $IMAGE_NAME:$IMAGE_TAG
    - docker logout
    - docker login -u $DOCKER_REGISTRY_USER -p $DOCKER_REGISTRY_PASSWORD
    - docker tag $CI_REGISTRY_IMAGE:$IMAGE_TAG $IMAGE_NAME:$IMAGE_TAG
    - docker tag $CI_REGISTRY_IMAGE:$IMAGE_TAG $IMAGE_NAME:latest
    - docker push $IMAGE_NAME:$IMAGE_TAG
    - docker push $IMAGE_NAME:latest


deploy_dev:
  stage: deploy_dev
  tags:
    - shared
  image: dtzar/helm-kubectl
  needs:
    - push_image
  script:
    - kubectl config set-cluster emea-aguisado-aks01 --server="${K8S_SERVER}"
    - kubectl config set clusters.emea-aguisado-aks01.certificate-authority-data ${K8S_CERTIFICATE_AUTHORITY_DATA}
    - kubectl config set-credentials clusterAdmin_emea-uk-aguisado-01_emea-aguisado-aks01 --token="${K8S_TOKEN}"
    - kubectl config set-context default --cluster=emea-aguisado-aks01 --user=clusterAdmin_emea-uk-aguisado-01_emea-aguisado-aks01
    - kubectl config use-context default
    #- sed -i "s/<VERSION>/${CI_COMMIT_SHORT_SHA}/g" deployment.yaml
    - kubectl apply -f manifests/dev/deployment.yaml
    - kubectl apply -f manifests/dev/service.yaml
  environment:
    name: Development


run_functional_tests:
  stage: deploy_dev
  tags:
    - shared
  needs:
    - deploy_dev
  script:
    - echo "running functional tests"
  environment:
    name: Development


deploy_staging:
  stage: deploy_staging
  tags:
    - shared
  image: dtzar/helm-kubectl
  script:
    - kubectl config set-cluster emea-aguisado-aks01 --server="${K8S_SERVER}"
    - kubectl config set clusters.emea-aguisado-aks01.certificate-authority-data ${K8S_CERTIFICATE_AUTHORITY_DATA}
    - kubectl config set-credentials clusterAdmin_emea-uk-aguisado-01_emea-aguisado-aks01 --token="${K8S_TOKEN}"
    - kubectl config set-context default --cluster=emea-aguisado-aks01 --user=clusterAdmin_emea-uk-aguisado-01_emea-aguisado-aks01
    - kubectl config use-context default
    #- sed -i "s/<VERSION>/${CI_COMMIT_SHORT_SHA}/g" deployment.yaml
    - kubectl apply -f manifests/staging/deployment.yaml
    - kubectl apply -f manifests/staging/service.yaml
  environment:
    name: Staging


run_performance_tests:
  stage: deploy_staging
  tags:
    - shared
  needs:
    - run_functional_tests
    - deploy_staging
  script: 
    - echo "Running performance tests"
  environment:
    name: Staging


#approve:
#  stage: approve
#  tags:
#    - shared
#  when: manual
#  needs:
#    - deploy_staging
#  script:
#    - echo Production deployment approved!!
#  allow_failure: false 
#  only:
#    - main


deploy_prod:
  stage: deploy_prod
  tags:
    - shared
  image: dtzar/helm-kubectl
  needs:
    - build_image
    - run_performance_tests
  script:
    - kubectl config set-cluster emea-aguisado-aks01 --server="${K8S_SERVER}"
    - kubectl config set clusters.emea-aguisado-aks01.certificate-authority-data ${K8S_CERTIFICATE_AUTHORITY_DATA}
    - kubectl config set-credentials clusterAdmin_emea-uk-aguisado-01_emea-aguisado-aks01 --token="${K8S_TOKEN}"
    - kubectl config set-context default --cluster=emea-aguisado-aks01 --user=clusterAdmin_emea-uk-aguisado-01_emea-aguisado-aks01
    - kubectl config use-context default
    #- sed -i "s/<VERSION>/${CI_COMMIT_SHORT_SHA}/g" deployment.yaml
    - kubectl apply -f manifests/prod/deployment.yaml
    - kubectl apply -f manifests/prod/service.yaml
  when: manual
  only:
    - main
  environment:
    name: Production

